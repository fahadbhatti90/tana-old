<?php

namespace App\Model;

use App\Model\Alerts\Notification;
use App\Notifications\forgetMail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Session;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The database table and primary Key used by the model.
     */
    protected $table = 'mgmt_user';
    protected $primaryKey = 'user_id';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'username', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($user){
            $user->profile()->create(["profile_mode"=> "light-layout"]);
        });
    }

    /**
     * Get the Profile for this User.
     */
    public function profile()
    {
        return $this->hasOne('App\Model\Profile','fk_user_id');
    }

    /**
     * Get the Role for this User.
     */
    public function roles()
    {
        return $this->belongsToMany('App\Model\Role', 'mgmt_user_role', 'fk_user_id', 'fk_role_id');
    }

    /**
     * Get the Brand for this User.
     */
    public function brand()
    {
        return $this->belongsToMany('App\Model\Brand', 'mgmt_account', 'fk_user_id', 'fk_brand_id');
    }

    /**
     * Get the Brand for this User.
     */
    function getUserBrand()
    {
        if($this->roles()->get()->first()->role_id == 3){
            $data = $this->brand()->where('is_active', 1)->orderBy('brand_name', 'ASC')->get();
        }else{
            $data = Brand::where('is_active', '!=',2)->orderBy('brand_name', 'ASC')->get();
        }
        return $data;
    }

    /**
     * Get the Un Notified Notifications.
     */
    function getNewNotification()
    {
        //change is_notified status before notifying all new notifications
        Notification::where('fk_user_id', auth()->user()->user_id)->update(array('is_notified' => '0'));
        //return all new notification with is_viewed = 1;
        return Notification::where('fk_user_id', auth()->user()->user_id)
                                ->where('is_viewed', 1)
                                ->where('is_disabled', 1)
                                ->orderBy('trigger_date', 'DESC')
                                ->get();
    }

    /**
     * Get the all enabled Notification.
     */
    function getAllNotification()
    {
        //return all new notification;
        return Notification::where('fk_user_id', auth()->user()->user_id)
                                ->where('is_disabled', 1)
                                ->orderBy('trigger_date', 'DESC')
                                ->get();
    }

    /**
     * Get the Brand for this User.
     */
    function getUserArchiveBrand()
    {
        if($this->roles()->get()->first()->role_id == 3){
            $data = $this->brand()->where('is_active',2)->get();
        }else{
            $data = Brand::where('is_active', 2)->get();
        }
        return $data;
    }

    /**
     * Get the Deleted Assigned Vendor for this User.
     */
    function getUserVendor()
    {
        if($this->roles()->get()->first()->role_id == 3){
            $brands = $this->getUserBrand();
            $vendors_id = $brands->pluck('vendors')->collapse()->pluck('vendor_id')->all();
            $data = Vendors::whereIn('vendor_id', $vendors_id)->where('is_active', 1)->get();
        }else{
            $data = Vendors::where('is_active', '!=',2)->get();
        }
        return $data;
    }

    /**
     * Get the Profile for this User.
     */
    public function getUserEdVendor()
    {
        return $this->hasOne('App\Model\edVendor','fk_user_id');
    }
    /**
     * Get the Deleted Assigned Vendor for this User.
     */
    function getUserArchiveVendor()
    {
        if($this->roles()->get()->first()->role_id == 3){
            $brands = $this->getUserBrand();
            $vendors_id = $brands->pluck('vendors')->collapse()->pluck('vendor_id')->all();
            $data = Vendors::whereIn('vendor_id', $vendors_id)->where('is_active', 2)->get();
        }else{
            $data = Vendors::where('is_active', 2)->get();
        }
        return $data;
    }

    /**
     * Get the Brand for this User.
     */
    function getGlobalBrand()
    {
        $data = $this->getUserBrand()->pluck('brand_name','brand_id')->all();
        //check user has no brand
        if(sizeof($data) == 0){
            setBrandSession(0 , "");
            return Session()->get('brand_name');
        }
        //check Session not Contain Brand OR Check Session Brand is Not Belong to User Brand
        if(!Session()->has('brand_id') OR !in_array(Session()->get('brand_id'),array_keys($data))) {
            //if so set its fist Brand
            $brand = array_key_first($data);
            setBrandSession($brand , $data[$brand]);
        }
        return Session()->get('brand_name');
    }

    /**
     * Get the superAdmin for the roles.
     */
    public function kpiThreshold()
    {
        return $this->hasMany('App\Model\KpiThreshold', 'fk_user_id');
    }

    /**
     * Send the password reset notification.
     *
     * @param  string  $token
     * @return void
     */
    public function sendPasswordResetNotification($token)
    {
        $this->notify(new forgetMail($token));
    }
}
